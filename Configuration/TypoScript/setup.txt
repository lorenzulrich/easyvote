plugin.tx_easyvote {
	view {
		templateRootPath = {$plugin.tx_easyvote.view.templateRootPath}
		partialRootPath = {$plugin.tx_easyvote.view.partialRootPath}
		layoutRootPath = {$plugin.tx_easyvote.view.layoutRootPath}
	}
	persistence {
		storagePid = {$plugin.tx_easyvote.persistence.storagePid}
	}
	features {
		# uncomment the following line to enable the new Property Mapper.
		# rewrittenPropertyMapper = 1
	}
}

plugin.tx_easyvote._CSS_DEFAULT_STYLE (
	textarea.f3-form-error {
		background-color:#FF9F9F;
		border: 1px #FF0000 solid;
	}

	input.f3-form-error {
		background-color:#FF9F9F;
		border: 1px #FF0000 solid;
	}

	.tx-easyvote table {
		border-collapse:separate;
		border-spacing:10px;
	}

	.tx-easyvote table th {
		font-weight:bold;
	}

	.tx-easyvote table td {
		vertical-align:top;
	}
)

# Content Element for displaying an image from image field or CSS class
tt_content.easyvoteimage = COA
tt_content.easyvoteimage {
	5 = TEXT
	5.stdWrap.noTrimWrap = |<div class="c-imagebox |

    10 = TEXT
    10.field = tx_easyvote_contentclass
    10.stdWrap.noTrimWrap = | easyvote-icons |
    10.if.isTrue.field = tx_easyvote_contentclass

    15 = TEXT
    15.value = ">

	20 = FILES
	20 {
		references {
			table = tt_content
			uid.data = field:uid
			fieldName = image
			listNum = 0
		}
		renderObj = COA
		renderObj {
			10 = IMAGE
			10 {
				file.import.data = file:current:publicUrl
				file.maxW = 260
				file.maxH = 260
			}
		}
	}
	20.stdWrap.wrap = <div class="center-image">|</div>
	20.if.isTrue.field = image

    25 = TEXT
    25.value = </div>

}